# Copyright (C) 2014 Google Inc.
#
# This file is part of ycmd.
#
# ycmd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ycmd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ycmd.  If not, see <http://www.gnu.org/licenses/>.

import os

# These are the compilation flags that will be used in case there's no
# compilation database set (by default, one is not set).
# CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.
flags = [
    '-Wall',
    '-Wextra',
    '-Werror',
    '-fexceptions',
    '-DNDEBUG',
    # THIS IS IMPORTANT! Without a "-std=<something>" flag, clang won't know which
    # language to use when compiling headers. So it will guess. Badly. So C++
    # headers will be compiled as C headers. You don't want that so ALWAYS specify
    # a "-std=<something>"._
    # For a C project, you would set this to something like 'c99' instead of
    # 'c++11'.
    '-std=c++14',  # gcc 4.8.4 you need to use -std=c++1y in later versions 5.2 you can use -std=c++14
    # ...and the same thing goes for the magic -x option which specifies the
    # language that the files to be compiled are written in. This is mostly
    # relevant for c++ headers.
    # For a C project, you would set this to 'c' instead of 'c++'.
    '-x',
    'c++',
    '-I',
    '$PONYAI_PATH/.sub-repos/',
    '-I',
    '$PONYAI_PATH/.sub-repos/make8-bin/',
    '-I',
    '$PONYAI_PATH/.sub-repos/make8-bin/external/glog/',
    '-I',
    '$PONYAI_PATH/.sub-repos/make8-bin/external/gflags/include/',
    '-I',
    '$PONYAI_PATH/../local/imgui/',
    '-isystem',
    '/usr/include/',
    '-isystem',
    '/usr/local/include/',
    '-isystem',
    '/usr/include/c++/5.4.0/',
    '-isystem',
    '/usr/lib/gcc/x86_64-linux-gnu/5.4.0/include',
    '-isystem',
    '/usr/include/x86_64-linux-gnu/c++/5.4.0/',
    '-isystem',
    '/usr/include/x86_64-linux-gnu/qt5/',
    '-isystem',
    '/usr/include/x86_64-linux-gnu/qt5/QtWidgets/',
    '-isystem',
    '/usr/include/x86_64-linux-gnu/qt5/QtGui/',
    '-isystem',
    '/usr/include/x86_64-linux-gnu/qt5/QtCore/',
]

# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags.
compilation_database_folder = ''

if os.path.exists(compilation_database_folder):
    import ycm_core
    database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
    database = None

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']


def DirectoryOfThisScript():
    return os.path.dirname(os.path.abspath(__file__))


def MakeRelativePathsInFlagsAbsolute(flags):
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if flag.startswith('$'):
                variable, _, flag = flag.partition('/')
                new_flag = os.path.join(os.environ[variable[1:]], flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(
                    replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)


# This is the entry point; this function is called by ycmd to produce flags for
# a file.
def FlagsForFile(filename, **kwargs):
    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(filename)
        if not compilation_info:
            return None

        final_flags = MakeRelativePathsInFlagsAbsolute(compilation_info.compiler_flags_)
    else:
        final_flags = MakeRelativePathsInFlagsAbsolute(flags)

    return {'flags': final_flags}
